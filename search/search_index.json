{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Volac Genomics Server Maintenance Manual Appliance Upkeep This manual describes how to: update reference libraries update software remove un-needed files populate the Tool input folders Server Upkeep This manual also describes how and when to: security updates update apt Serve rebuild Instructions are also provided in the event that a re-build is required.","title":"Contents"},{"location":"index.html#volac-genomics-server-maintenance-manual","text":"","title":"Volac Genomics Server Maintenance Manual"},{"location":"index.html#appliance-upkeep","text":"This manual describes how to: update reference libraries update software remove un-needed files populate the Tool input folders","title":"Appliance Upkeep"},{"location":"index.html#server-upkeep","text":"This manual also describes how and when to: security updates update apt","title":"Server Upkeep"},{"location":"index.html#serve-rebuild","text":"Instructions are also provided in the event that a re-build is required.","title":"Serve rebuild"},{"location":"access.html","text":"Logging in Connect your local computer to the server. MobaXterm , the enhanced terminal for Windows is recommended. Folders can be found in the side bar to the left. Folders and files can be directly dragged and dropped between your personal computer and the Tool. This Tool is located inside the genome_store folder. Opening a stable connection (recommended) You currently have access to the Tool if you have completed the above section. However, sometimes the network connection between the computer that you are using and the machine where the Tool is located can break. If the Tool is running when the connection breaks, even if the break is only brief, the Tool will stop. You can tell if this has happen because your terminal\u2019s window will freeze; there may also be a partially populated output folder. A terminal multiplexer (tmux) solves this. A terminal multiplexer allows the user to start a session and then detach, so a remote process continues running even when the user is disconnected. It also has the benefit of allowing the user to detach from one computer and reattach using a different computer. To initiate a tmux session in the Appliance terminal window enter: tmux new -s <name> Example This is the code to set up a stable tmux connection named Idris: tmux new -s Idris Tip You can set up multiple tmux sessions; give each one a different name. To detach from a session hold down the Ctrl key and press b , release both keys, then press d . To list existing tmux sessions use tmux ls . To reconnect to an existing session use tmux a -t <name> .","title":"Accessing the server"},{"location":"access.html#logging-in","text":"Connect your local computer to the server. MobaXterm , the enhanced terminal for Windows is recommended. Folders can be found in the side bar to the left. Folders and files can be directly dragged and dropped between your personal computer and the Tool. This Tool is located inside the genome_store folder.","title":"Logging in"},{"location":"access.html#opening-a-stable-connection-recommended","text":"You currently have access to the Tool if you have completed the above section. However, sometimes the network connection between the computer that you are using and the machine where the Tool is located can break. If the Tool is running when the connection breaks, even if the break is only brief, the Tool will stop. You can tell if this has happen because your terminal\u2019s window will freeze; there may also be a partially populated output folder. A terminal multiplexer (tmux) solves this. A terminal multiplexer allows the user to start a session and then detach, so a remote process continues running even when the user is disconnected. It also has the benefit of allowing the user to detach from one computer and reattach using a different computer. To initiate a tmux session in the Appliance terminal window enter: tmux new -s <name> Example This is the code to set up a stable tmux connection named Idris: tmux new -s Idris Tip You can set up multiple tmux sessions; give each one a different name. To detach from a session hold down the Ctrl key and press b , release both keys, then press d . To list existing tmux sessions use tmux ls . To reconnect to an existing session use tmux a -t <name> .","title":"Opening a stable connection (recommended)"},{"location":"app.html","text":"The Genome Analysis Tools These tools were designed to explore bacterial genomes. The suite includes: Application Description The Core Genome assembly, taxonomic classification, phylogeny, annotation and mass screening. Tool 1 Mass screening with curated databases. Tool 2 Mass screening with genes you choose. Tool 3 Comparison of genomes, and phylogeny. Tool 4 Primer design: identification of unique stretches of DNA. They are built with the pipeline manager Nextflow , and operate within Singularity containers. The suite was developed as part of a collaborative project between Volac International Ltd . and Cardiff University , funded in part by Innovate UK as part of a knowledge transfer partnership (KTP) . The Reference Libraries maxThree for Taxonomy and Tool 4 The maxThree reference library contains genome assemblies of lactic acid bacteria. Three strains of every species within the following Genera are included: all Genera from the newly named Lactobacillaceae* family the Genera Enterococcus, the Genera Carnobacterium, and the Genera Lactococcus. * see below for a list of the Genera with family Lactobacillaceae. The genomes are downloaded from the RefSeq database. The strains with the highest specifications are included. For some species, data for fewer than three strains is available. File names are Genus_species_strain, and are cleaned to remove any spaces, colons, backslashes and additional information. For the Core's taxonomy module, the genome assemblies are saved as .fna in a folder named fna_YYYY-MM-DD . A separate folder containing lists of all the downloaded strains is also generated, fna_ref_lists_YYYY-MM-DD/ . For Tool 4, the genome assemblies are saved as .fasta in a folder named tool4_fasta_YYYY-MM-DD . maxOne for Phylogeny The Core uses the maxOne reference library to generate a phylogenetic tree. Like maxThree, the maxOne reference library also contains genome assemblies of lactic acid bacteria. One strains of every species within the newly named Lactobacillaceae* family are included. * see below for a list of the Genera with family Lactobacillaceae. This library is made using a similar script to maxThree, however in this case a single genome for each species is included. File names are Genus_species_strain, and are cleaned to remove any spaces, colons, backslashes and additional information. They are saved as .fasta in a folder named fasta_YYYY-MM-DD . kraken2 kraken2 databases are required by three different processes in the Core Tool : kraken2_QC determines if contamination is present in the raw reads, kraken2 is used to determine the Genus of each query strain and kraken2_miniKraken provides taxonomy information if the isolate is of an unexpected Genus. Information The 31 Genera of the Lactobacillaceae family are: Acetilactobacillus, Agrilactobacillus, Amylolactobacillus, Apilactobacillus, Bombilactobacillus, Companilactobacillus, Convivina, Dellaglioa, Fructilactobacillus, Fructobacillus, Furfurilactobacillus, Holzapfelia, Lacticaseibacillus, Lactiplantibacillus, Lactobacillus, Lapidilactobacillus, Latilactobacillus, Lentilactobacillus, Leuconostoc, Levilactobacillus, Ligilactobacillus, Limosilactobacillus, Liquorilactobacillus, Loigolactobacillus, Oenococcus, Paralactobacillus, Paucilactobacillus, Schleiferilactobacillus, Secundilactobacillus, Pediococcus, Weissella.","title":"Appliance description"},{"location":"app.html#_1","text":"","title":""},{"location":"app.html#the-genome-analysis-tools","text":"These tools were designed to explore bacterial genomes. The suite includes: Application Description The Core Genome assembly, taxonomic classification, phylogeny, annotation and mass screening. Tool 1 Mass screening with curated databases. Tool 2 Mass screening with genes you choose. Tool 3 Comparison of genomes, and phylogeny. Tool 4 Primer design: identification of unique stretches of DNA. They are built with the pipeline manager Nextflow , and operate within Singularity containers. The suite was developed as part of a collaborative project between Volac International Ltd . and Cardiff University , funded in part by Innovate UK as part of a knowledge transfer partnership (KTP) .","title":"The Genome Analysis Tools"},{"location":"app.html#the-reference-libraries","text":"","title":"The Reference Libraries"},{"location":"app.html#maxthree-for-taxonomy-and-tool-4","text":"The maxThree reference library contains genome assemblies of lactic acid bacteria. Three strains of every species within the following Genera are included: all Genera from the newly named Lactobacillaceae* family the Genera Enterococcus, the Genera Carnobacterium, and the Genera Lactococcus. * see below for a list of the Genera with family Lactobacillaceae. The genomes are downloaded from the RefSeq database. The strains with the highest specifications are included. For some species, data for fewer than three strains is available. File names are Genus_species_strain, and are cleaned to remove any spaces, colons, backslashes and additional information. For the Core's taxonomy module, the genome assemblies are saved as .fna in a folder named fna_YYYY-MM-DD . A separate folder containing lists of all the downloaded strains is also generated, fna_ref_lists_YYYY-MM-DD/ . For Tool 4, the genome assemblies are saved as .fasta in a folder named tool4_fasta_YYYY-MM-DD .","title":"maxThree for Taxonomy and Tool 4"},{"location":"app.html#maxone-for-phylogeny","text":"The Core uses the maxOne reference library to generate a phylogenetic tree. Like maxThree, the maxOne reference library also contains genome assemblies of lactic acid bacteria. One strains of every species within the newly named Lactobacillaceae* family are included. * see below for a list of the Genera with family Lactobacillaceae. This library is made using a similar script to maxThree, however in this case a single genome for each species is included. File names are Genus_species_strain, and are cleaned to remove any spaces, colons, backslashes and additional information. They are saved as .fasta in a folder named fasta_YYYY-MM-DD .","title":"maxOne for Phylogeny"},{"location":"app.html#kraken2","text":"kraken2 databases are required by three different processes in the Core Tool : kraken2_QC determines if contamination is present in the raw reads, kraken2 is used to determine the Genus of each query strain and kraken2_miniKraken provides taxonomy information if the isolate is of an unexpected Genus. Information The 31 Genera of the Lactobacillaceae family are: Acetilactobacillus, Agrilactobacillus, Amylolactobacillus, Apilactobacillus, Bombilactobacillus, Companilactobacillus, Convivina, Dellaglioa, Fructilactobacillus, Fructobacillus, Furfurilactobacillus, Holzapfelia, Lacticaseibacillus, Lactiplantibacillus, Lactobacillus, Lapidilactobacillus, Latilactobacillus, Lentilactobacillus, Leuconostoc, Levilactobacillus, Ligilactobacillus, Limosilactobacillus, Liquorilactobacillus, Loigolactobacillus, Oenococcus, Paralactobacillus, Paucilactobacillus, Schleiferilactobacillus, Secundilactobacillus, Pediococcus, Weissella.","title":"kraken2"},{"location":"apt_update.html","text":"Updating the package manager APT is the default package manager on Ubuntu/Debian based Linux distributions. When you log into the Volac server you will see a message like this: 22 updates can be applied immediately. To see these additional updates run: apt list --upgradable To upgrade, enter the follow commands. You will need to enter the server password for command that includes sudo . sudo apt update apt list --upgradable sudo apt dist-upgrade -y Next time you log in the message will be: 0 updates can be applied immediately.","title":"Updating apt"},{"location":"apt_update.html#updating-the-package-manager","text":"APT is the default package manager on Ubuntu/Debian based Linux distributions. When you log into the Volac server you will see a message like this: 22 updates can be applied immediately. To see these additional updates run: apt list --upgradable To upgrade, enter the follow commands. You will need to enter the server password for command that includes sudo . sudo apt update apt list --upgradable sudo apt dist-upgrade -y Next time you log in the message will be: 0 updates can be applied immediately.","title":"Updating the package manager"},{"location":"clear.html","text":"Clearing the cache First enter this command: cd ~/genome_tools/_maintenance_ Then enter this command. ./clean_up.sh You will be asked to enter the server password. If asked rm: remove write-protected regular file '........' , then enter y . Info This process will remove the work/ directory, the hidden nextflow files and folders, and the singularity container images.","title":"Removing un-needed files"},{"location":"clear.html#clearing-the-cache","text":"First enter this command: cd ~/genome_tools/_maintenance_ Then enter this command. ./clean_up.sh You will be asked to enter the server password. If asked rm: remove write-protected regular file '........' , then enter y . Info This process will remove the work/ directory, the hidden nextflow files and folders, and the singularity container images.","title":"Clearing the cache"},{"location":"containers.html","text":"Using updated software versions The Tools are functional in their original configuration. Each Tool is a pipeline that connects many pieces of software. Each piece of software can be exchanged for a different version of the same software. An alternative version could be newer, older, or from a different source. Each piece of software is housed in a stand-alone unit called a container. Containers are portable and reproducible; they allow the packaging of software and their associated environments (OS, libraries, tools, etc.) within an encapsulated file. To use a different software version simply specify a different container. Image Registries The first thing you need to do is choose the a container. Biocontainers and StaphB are both a good source of up-to-date and reliable container images for genomic analysis. Container Images can also be found in: Sylabs.io Container Library Docker Hub Singularity Hub (no longer updated) GitHub For example: To choose the version of the software tool look in the tab named 'tags'; the different versions are listed. Specifying alternative software version(s) The Core, and each Tools all have an individual nextflow.config file. This is where the containers (and consequently, the encapsulated software) is specified. To edit the nextflow.config file: located the relevant nextflow.config file double click to open the file update the container address ONLY run the pipeline to confirm that the alternative container is functional For example, in this case, the trimGaloreFastQC process uses the container 'quay.io/biocontainers/trim-galore:0.6.6--0' , process { withName:trimGaloreFastQC { container = 'quay.io/biocontainers/trim-galore:0.6.6--0' } which can be updated to 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' . process { withName:trimGaloreFastQC { container = 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' } Important You must modify all containers that use the same software. For example, seqtk , seqtkSummary and version_seqtk all use 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' . Therefore, change all three. Original configurations for Core process { withName:version_trim_galore { container = 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' } withName:trimGaloreFastQC { container = 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' } withName:version_seqtk { container = 'quay.io/biocontainers/seqtk:1.3--h84994c4_1' } withName:seqtk { container = 'quay.io/biocontainers/seqtk:1.3--h84994c4_1' } withName:seqtkSummary { container = 'quay.io/biocontainers/seqtk:1.3--h84994c4_1' } withName:version_shovill { container = 'quay.io/biocontainers/shovill:1.1.0--hdfd78af_1' } withName:shovill { container = 'quay.io/biocontainers/shovill:1.1.0--hdfd78af_1' } withName:version_quast { container = 'nanozoo/quast:5.0.2--e7f0cfe' } withName:quast { container = 'nanozoo/quast:5.0.2--e7f0cfe' } withName:version_prokka { container = 'quay.io/biocontainers/prokka:1.14.6--pl5321hdfd78af_4' } withName:prokka { container = 'quay.io/biocontainers/prokka:1.14.6--pl5321hdfd78af_4' } withName:version_multiQC { container = 'ewels/multiqc:v1.11' } withName:multiQC { container = 'ewels/multiqc:v1.11' } withName:version_abricate { container = 'nanozoo/abricate:1.0.1--8960147' } withName:massScreeningDatabaseDownload { container = 'nanozoo/abricate:1.0.1--8960147' } withName:massScreening { container = 'nanozoo/abricate:1.0.1--8960147' } withName:massScreeningSummary { container = 'nanozoo/abricate:1.0.1--8960147' } withName:version_kraken2 { container = 'quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2' } withName:kraken2 { container = 'quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2' } withName:kraken2_miniKraken { container = 'quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2' } withName:kraken2_QC { container = 'quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2' } withName:version_fastANI { container = 'quay.io/biocontainers/fastani:1.33--h0fdf51a_0' } withName:fastANI { container = 'quay.io/biocontainers/fastani:1.33--h0fdf51a_0' } withName:version_fasttree { container = 'quay.io/biocontainers/fasttree:2.1.10--h779adbc_6' } withName:fasttree { container = 'quay.io/biocontainers/fasttree:2.1.10--h779adbc_6' } withName:lsBSR_NEW { container = 'quay.io/annacprice/extractcoregenome:1.03-r1' } } Original configurations for Tool 1 process { container = 'nanozoo/abricate:1.0.1--8960147' } Original configurations for Tool 2 process { withName:version { container = 'nanozoo/abricate:1.0.1--8960147' } withName:make_custom_DB { container = 'ncbi/blast:2.13.0' } withName:massScreening { container = 'nanozoo/abricate:1.0.1--8960147' } withName:massScreeningSummary { container = 'nanozoo/abricate:1.0.1--8960147' } } Original configurations for Tool 3 process { withName:roary { container = 'docker://quay.io/biocontainers/roary:3.13.0--pl526h516909a_0' } withName:fasttree { container = 'docker://quay.io/biocontainers/fasttree:2.1.11--h779adbc_0' } } Original configurations for Tool 4 process { withName:predictORFs { container = 'quay.io/biocontainers/prodigal:2.6.3--h516909a_2' } withName:makeBLASTDatabase { container = 'ncbi/blast:2.13.0' } withName:BLASTGeneSequences { container = 'ncbi/blast:2.13.0' } withName:extractNoHitGenes { container = 'staphb/samtools:1.15' } withName:sortNoHitGenes { container = 'nanozoo/bbmap:38.86--9ebcbfa' } withName:getLongestGenes { container = 'quay.io/biocontainers/seqtk:1.3--h84994c4_1' } }","title":"Updating software"},{"location":"containers.html#using-updated-software-versions","text":"The Tools are functional in their original configuration. Each Tool is a pipeline that connects many pieces of software. Each piece of software can be exchanged for a different version of the same software. An alternative version could be newer, older, or from a different source. Each piece of software is housed in a stand-alone unit called a container. Containers are portable and reproducible; they allow the packaging of software and their associated environments (OS, libraries, tools, etc.) within an encapsulated file. To use a different software version simply specify a different container.","title":"Using updated software versions"},{"location":"containers.html#image-registries","text":"The first thing you need to do is choose the a container. Biocontainers and StaphB are both a good source of up-to-date and reliable container images for genomic analysis. Container Images can also be found in: Sylabs.io Container Library Docker Hub Singularity Hub (no longer updated) GitHub For example: To choose the version of the software tool look in the tab named 'tags'; the different versions are listed.","title":"Image Registries"},{"location":"containers.html#specifying-alternative-software-versions","text":"The Core, and each Tools all have an individual nextflow.config file. This is where the containers (and consequently, the encapsulated software) is specified. To edit the nextflow.config file: located the relevant nextflow.config file double click to open the file update the container address ONLY run the pipeline to confirm that the alternative container is functional For example, in this case, the trimGaloreFastQC process uses the container 'quay.io/biocontainers/trim-galore:0.6.6--0' , process { withName:trimGaloreFastQC { container = 'quay.io/biocontainers/trim-galore:0.6.6--0' } which can be updated to 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' . process { withName:trimGaloreFastQC { container = 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' } Important You must modify all containers that use the same software. For example, seqtk , seqtkSummary and version_seqtk all use 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' . Therefore, change all three.","title":"Specifying alternative software version(s)"},{"location":"containers.html#original-configurations-for-core","text":"process { withName:version_trim_galore { container = 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' } withName:trimGaloreFastQC { container = 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' } withName:version_seqtk { container = 'quay.io/biocontainers/seqtk:1.3--h84994c4_1' } withName:seqtk { container = 'quay.io/biocontainers/seqtk:1.3--h84994c4_1' } withName:seqtkSummary { container = 'quay.io/biocontainers/seqtk:1.3--h84994c4_1' } withName:version_shovill { container = 'quay.io/biocontainers/shovill:1.1.0--hdfd78af_1' } withName:shovill { container = 'quay.io/biocontainers/shovill:1.1.0--hdfd78af_1' } withName:version_quast { container = 'nanozoo/quast:5.0.2--e7f0cfe' } withName:quast { container = 'nanozoo/quast:5.0.2--e7f0cfe' } withName:version_prokka { container = 'quay.io/biocontainers/prokka:1.14.6--pl5321hdfd78af_4' } withName:prokka { container = 'quay.io/biocontainers/prokka:1.14.6--pl5321hdfd78af_4' } withName:version_multiQC { container = 'ewels/multiqc:v1.11' } withName:multiQC { container = 'ewels/multiqc:v1.11' } withName:version_abricate { container = 'nanozoo/abricate:1.0.1--8960147' } withName:massScreeningDatabaseDownload { container = 'nanozoo/abricate:1.0.1--8960147' } withName:massScreening { container = 'nanozoo/abricate:1.0.1--8960147' } withName:massScreeningSummary { container = 'nanozoo/abricate:1.0.1--8960147' } withName:version_kraken2 { container = 'quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2' } withName:kraken2 { container = 'quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2' } withName:kraken2_miniKraken { container = 'quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2' } withName:kraken2_QC { container = 'quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2' } withName:version_fastANI { container = 'quay.io/biocontainers/fastani:1.33--h0fdf51a_0' } withName:fastANI { container = 'quay.io/biocontainers/fastani:1.33--h0fdf51a_0' } withName:version_fasttree { container = 'quay.io/biocontainers/fasttree:2.1.10--h779adbc_6' } withName:fasttree { container = 'quay.io/biocontainers/fasttree:2.1.10--h779adbc_6' } withName:lsBSR_NEW { container = 'quay.io/annacprice/extractcoregenome:1.03-r1' } }","title":"Original configurations for Core"},{"location":"containers.html#original-configurations-for-tool-1","text":"process { container = 'nanozoo/abricate:1.0.1--8960147' }","title":"Original configurations for Tool 1"},{"location":"containers.html#original-configurations-for-tool-2","text":"process { withName:version { container = 'nanozoo/abricate:1.0.1--8960147' } withName:make_custom_DB { container = 'ncbi/blast:2.13.0' } withName:massScreening { container = 'nanozoo/abricate:1.0.1--8960147' } withName:massScreeningSummary { container = 'nanozoo/abricate:1.0.1--8960147' } }","title":"Original configurations for Tool 2"},{"location":"containers.html#original-configurations-for-tool-3","text":"process { withName:roary { container = 'docker://quay.io/biocontainers/roary:3.13.0--pl526h516909a_0' } withName:fasttree { container = 'docker://quay.io/biocontainers/fasttree:2.1.11--h779adbc_0' } }","title":"Original configurations for Tool 3"},{"location":"containers.html#original-configurations-for-tool-4","text":"process { withName:predictORFs { container = 'quay.io/biocontainers/prodigal:2.6.3--h516909a_2' } withName:makeBLASTDatabase { container = 'ncbi/blast:2.13.0' } withName:BLASTGeneSequences { container = 'ncbi/blast:2.13.0' } withName:extractNoHitGenes { container = 'staphb/samtools:1.15' } withName:sortNoHitGenes { container = 'nanozoo/bbmap:38.86--9ebcbfa' } withName:getLongestGenes { container = 'quay.io/biocontainers/seqtk:1.3--h84994c4_1' } }","title":"Original configurations for Tool 4"},{"location":"importing.html","text":"Importing a pre-built kraken2 reference library A kraken2 database is used by three processes within the Core Tool: kraken2, kraken2_miniKraken and kraken2_QC. Prebuilt kraken2 reference libraries can be found on Ben Langmead's Github page . Ben Langmead is one of the contributers to kraken2 . Navigate to the reference_libraries folder by entering cd ~/genome_tools/reference_libraries . Enter curl -o file_name address , substituting file_name and address , and wait for the file to transfer completely. Unpack using tar -zxvf file_name.tar.gz , substituting file_name . To use server space efficiently, the file_name.tar.gz can now be delete, and any older version. CURL example To c opy URL , or curl, the stardard kraken2 database originally generated on 17th May 2021 and limited to 8 Gb use: curl -o k2_standard_8gb_20210517.tar.gz https://genome-idx.s3.amazonaws.com/kraken/k2_standard_8gb_20210517.tar.gz Tips Keep the original file name to remind you origin of the library. Find the URL by right-clicking over the item you want to transfer in the HTTPS URL column on Ben Langmead's website , and selecting Copy Link .","title":"Importing a library"},{"location":"importing.html#importing-a-pre-built-kraken2-reference-library","text":"A kraken2 database is used by three processes within the Core Tool: kraken2, kraken2_miniKraken and kraken2_QC. Prebuilt kraken2 reference libraries can be found on Ben Langmead's Github page . Ben Langmead is one of the contributers to kraken2 . Navigate to the reference_libraries folder by entering cd ~/genome_tools/reference_libraries . Enter curl -o file_name address , substituting file_name and address , and wait for the file to transfer completely. Unpack using tar -zxvf file_name.tar.gz , substituting file_name . To use server space efficiently, the file_name.tar.gz can now be delete, and any older version. CURL example To c opy URL , or curl, the stardard kraken2 database originally generated on 17th May 2021 and limited to 8 Gb use: curl -o k2_standard_8gb_20210517.tar.gz https://genome-idx.s3.amazonaws.com/kraken/k2_standard_8gb_20210517.tar.gz Tips Keep the original file name to remind you origin of the library. Find the URL by right-clicking over the item you want to transfer in the HTTPS URL column on Ben Langmead's website , and selecting Copy Link .","title":"Importing a pre-built kraken2 reference library"},{"location":"input.html","text":"Populating the Tool's Library folders First enter this command: cd ~/genome_tools/_maintenance_ Then enter this command. ./populate_inputs.sh The message(s) are expected ( mv: will not overwrite just-created...... ). Info It is good practice to remove any duplicate output folders before populating the Library folders.","title":"Populating the Tool input folders"},{"location":"input.html#populating-the-tools-library-folders","text":"First enter this command: cd ~/genome_tools/_maintenance_ Then enter this command. ./populate_inputs.sh The message(s) are expected ( mv: will not overwrite just-created...... ). Info It is good practice to remove any duplicate output folders before populating the Library folders.","title":"Populating the Tool's Library folders"},{"location":"rebuild.html","text":"A fresh software build REBUILDING A SERVER WILL DELETE ALL CURRENT DATA ON THE SERVER. To set up the server with a fresh build, you first need to return it to it's original state. Ask Volac I.T. to wipe the server and install ubuntu-20.04 and java, openjdk-11 . Next, use an ansible playbook to set up necessary software tools. This is automated by an ansible playbook, vg-install . Follow the install instructions on the playbook's website. The playbook has been tested using GitHub Actions. Info The playbook will set up the server with the original software versions . As well as installing the necessary software, the ansible playbook sets up the genome_tools/ folder and populates it with Tool 1, Tool 2 and Tool 3. Tool 4, the Core, and the maintenance and reference libraries folders need to be added manually, see below. Populating the new build Four modules are not set up automatically by the ansible playbook. They are stored in private repositories in the volac-genomics GitHub site. They can be cloned to the local server as follows. 1. Authenticate to GitHub Using the command line, enter the following commands substituting your details for Fred's: git config --global user.name Fred Blogs git config --global user.email fred.blogs@place.com ssh -T git@github.com Next, follow these instructions to create a personal access token . You will need this to access GitHub. 2. Clone the repositories Using the command line, change directory using: cd ~/genome_tools/ Then enter the following commands to clone the private repositories to your local server. You will need to enter your personal access token each time. The token starts ghp_ . git clone https://github.com/volac-genomics/Core.git git clone https://github.com/volac-genomics/Tool_4.git git clone https://github.com/volac-genomics/reference_libraries.git git clone https://github.com/volac-genomics/maintenance.git The server has now been restored to it's original state.","title":"A fresh build"},{"location":"rebuild.html#a-fresh-software-build","text":"REBUILDING A SERVER WILL DELETE ALL CURRENT DATA ON THE SERVER. To set up the server with a fresh build, you first need to return it to it's original state. Ask Volac I.T. to wipe the server and install ubuntu-20.04 and java, openjdk-11 . Next, use an ansible playbook to set up necessary software tools. This is automated by an ansible playbook, vg-install . Follow the install instructions on the playbook's website. The playbook has been tested using GitHub Actions. Info The playbook will set up the server with the original software versions . As well as installing the necessary software, the ansible playbook sets up the genome_tools/ folder and populates it with Tool 1, Tool 2 and Tool 3. Tool 4, the Core, and the maintenance and reference libraries folders need to be added manually, see below.","title":"A fresh software build"},{"location":"rebuild.html#populating-the-new-build","text":"Four modules are not set up automatically by the ansible playbook. They are stored in private repositories in the volac-genomics GitHub site. They can be cloned to the local server as follows.","title":"Populating the new build"},{"location":"rebuild.html#1-authenticate-to-github","text":"Using the command line, enter the following commands substituting your details for Fred's: git config --global user.name Fred Blogs git config --global user.email fred.blogs@place.com ssh -T git@github.com Next, follow these instructions to create a personal access token . You will need this to access GitHub.","title":"1. Authenticate to GitHub"},{"location":"rebuild.html#2-clone-the-repositories","text":"Using the command line, change directory using: cd ~/genome_tools/ Then enter the following commands to clone the private repositories to your local server. You will need to enter your personal access token each time. The token starts ghp_ . git clone https://github.com/volac-genomics/Core.git git clone https://github.com/volac-genomics/Tool_4.git git clone https://github.com/volac-genomics/reference_libraries.git git clone https://github.com/volac-genomics/maintenance.git The server has now been restored to it's original state.","title":"2. Clone the repositories"},{"location":"reflib.html","text":"Updating the reference libraries from RefSeq Core and Tool 4 require reference libraries downloaded from RefSeq. The python scripts automate this process for you and deposit the new library in the reference_libraries folder. You need to update the Tool's config files so that they use the new libraries. Making a new library Reference libraries can easily be made as follows: Navigate to the _maintenance_ folder by entering cd ~/genome_tools/_maintenance_ . Run the appropriate script using the command in the table below. Check that the following message appears: Reference library complete . The commands are: Reference Library Command maxOne python3 maxOne_phylogeny.py maxThree python3 maxThree_taxonomy.py maxThree (for Tool 4) python3 maxThree_tool4.py Reference libraries are automatically saved here: ~/genome_tools/reference_libraries The newly generated libraries are saved with the current date. Linking the Tools to the new library Update the relevant config files to link the Tools to the newly generated reference libraries by following these three steps: Locate the config file in the File Browser. Double-click on nextflow.config to edit Update the relevent lines (see below), save and close. For the Core taxonomy module The taxonomy module uses the maxThree database. maxThree has two parts: params.fastanidbpath , the reference genome sequences (ending .fasta ) and params.fastanireflistpath , the names of the reference genomes grouped in files by Genus. Be sure the update both, replacing YYYY-MM-DD : params.fastanidbpath = \"/file_path/fna_YYYY-MM-DD/*\" params.fastanireflistpath = \"/file_path/fna_ref_lists_YYYY-MM-DD/*\" For the Core phylogeny module The phylogeny module uses the maxOne database. The location of the database is specified here: params.lsbsrrefgenomefasta = \"/file_path/fasta_YYYY-MM-DD/\" genomes must end in .fasta . Example The whole path to a fasta database built on 29th April 2022 is: params.lsbsrrefgenomefasta = \"../reference_libraries/fasta_2022-04-29/\" For Tool 4 Tool 4 uses the maxOne database. The location of the database is specified here: backgroundGenomesDir = \"../reference_libraries/tool4_fasta_YYYY-MM-DD\" genomes must end in .fasta .","title":"Updating reference libraries"},{"location":"reflib.html#updating-the-reference-libraries-from-refseq","text":"Core and Tool 4 require reference libraries downloaded from RefSeq. The python scripts automate this process for you and deposit the new library in the reference_libraries folder. You need to update the Tool's config files so that they use the new libraries.","title":"Updating the reference libraries from RefSeq"},{"location":"reflib.html#making-a-new-library","text":"Reference libraries can easily be made as follows: Navigate to the _maintenance_ folder by entering cd ~/genome_tools/_maintenance_ . Run the appropriate script using the command in the table below. Check that the following message appears: Reference library complete . The commands are: Reference Library Command maxOne python3 maxOne_phylogeny.py maxThree python3 maxThree_taxonomy.py maxThree (for Tool 4) python3 maxThree_tool4.py Reference libraries are automatically saved here: ~/genome_tools/reference_libraries The newly generated libraries are saved with the current date.","title":"Making a new library"},{"location":"reflib.html#linking-the-tools-to-the-new-library","text":"Update the relevant config files to link the Tools to the newly generated reference libraries by following these three steps: Locate the config file in the File Browser. Double-click on nextflow.config to edit Update the relevent lines (see below), save and close.","title":"Linking the Tools to the new library"},{"location":"reflib.html#for-the-core-taxonomy-module","text":"The taxonomy module uses the maxThree database. maxThree has two parts: params.fastanidbpath , the reference genome sequences (ending .fasta ) and params.fastanireflistpath , the names of the reference genomes grouped in files by Genus. Be sure the update both, replacing YYYY-MM-DD : params.fastanidbpath = \"/file_path/fna_YYYY-MM-DD/*\" params.fastanireflistpath = \"/file_path/fna_ref_lists_YYYY-MM-DD/*\"","title":"For the Core taxonomy module"},{"location":"reflib.html#for-the-core-phylogeny-module","text":"The phylogeny module uses the maxOne database. The location of the database is specified here: params.lsbsrrefgenomefasta = \"/file_path/fasta_YYYY-MM-DD/\" genomes must end in .fasta . Example The whole path to a fasta database built on 29th April 2022 is: params.lsbsrrefgenomefasta = \"../reference_libraries/fasta_2022-04-29/\"","title":"For the Core phylogeny module"},{"location":"reflib.html#for-tool-4","text":"Tool 4 uses the maxOne database. The location of the database is specified here: backgroundGenomesDir = \"../reference_libraries/tool4_fasta_YYYY-MM-DD\" genomes must end in .fasta .","title":"For Tool 4"},{"location":"secure.html","text":"Security updates are conducted weekly by Volac I.T.","title":"Security updates"},{"location":"security_updates.html","text":"","title":"Security updates"},{"location":"server.html","text":"The following software is installed: Nextflow , version 21.10.6 ( Find the documentation here ). apt-get GNU wget 1.20.3 java, openjdk-11 Singularity-ce version 3.9.4 ( Find the documentation here ) and Singularity dependencies (including Go, version go1.16.7 linux/amd64)","title":"Server description"}]}